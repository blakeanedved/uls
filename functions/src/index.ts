import * as functions from 'firebase-functions';
import express from 'express';
import cors from 'cors';
import * as admin from 'firebase-admin';
import bodyParser from 'body-parser';

interface APIRequest {
  suffix?: string;
  url: string;
  autoSuffix?: boolean;
  length?: Number;
}

admin.initializeApp();
const db = admin.firestore();

const app = express();

let urls: { [name: string]: string };
let blacklistedSuffixes: string[] = [];

db.collection('shortenedUrls').onSnapshot((snapshot) => {
  urls = snapshot.docs.reduce((acc: any, cur) => {
    acc[cur.id] = cur.data().url;
    return acc;
  }, {});
});

db.collection('config')
  .doc('blacklistedSuffixes')
  .onSnapshot((doc) => {
    blacklistedSuffixes = doc?.data()?.data;
  });

app.use(cors({ origin: true }));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.get('/debug', (_, res) => {
  res.send({ urls, blacklistedSuffixes });
});

app.get('/debug/:url', (req, res) => {
  res.send({ urls, exists: req.params.url in urls });
});

app.post('/createNewLink', async (req, res) => {
  const { url, suffix, autoSuffix, length }: APIRequest = req.body;

  if (url) {
    if (suffix) {
      if (blacklistedSuffixes.includes(suffix)) {
        res.send({ status: 'error', error: 'That suffix is not allowed' });
      } else {
        if (suffix.length > 72) {
          res.send({
            status: 'error',
            error: 'That suffix is too long (max 72 characters)',
          });
        } else {
          db.collection('shortenedUrls')
            .doc(suffix)
            .create({ url })
            .then((_) => {
              res.send({
                status: 'successful',
                url: `https://url-shortener-5a1b1.web.app/${suffix}`,
              });
            })
            .catch((error) => {
              if (error.code === 6) {
                res.send({
                  status: 'error',
                  error: 'Error: A URL with that suffix already exists',
                });
              } else {
                res.send({
                  status: 'error',
                  error: 'An unknown error occurred',
                });
              }
            });
        }
      }
    } else if (autoSuffix) {
      let autoGeneratedSuffix: string;

      do {
        autoGeneratedSuffix = randomCharacterString(length || 4);
      } while (autoGeneratedSuffix in urls);

      db.collection('shortenedUrls')
        .doc(autoGeneratedSuffix)
        .create({ url })
        .then((_) => {
          res.send({
            status: 'successful',
            url: `https://url-shortener-5a1b1.web.app/${autoGeneratedSuffix}`,
          });
        })
        .catch((error) => {
          res.send({
            status: 'error',
            error: 'An unknown error occurred',
          });
        });
    } else {
      res.send({
        status: 'error',
        error: 'Please provide a suffix or use the autoSuffix option',
      });
    }
  } else {
    res.send({ status: 'error', error: 'Please provide a url' });
  }
});

app.get('/:url', (req, res) => {
  const url: string = req.params.url;

  if (url in urls) {
    res.redirect(urls[url]);
  } else {
    res.send('That link doesnt exist');
  }
});

const randomCharacterString = (length: Number) => {
  let string: string = '';

  for (let i = 0; i < length; i++) {
    string += 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'[
      Math.floor(Math.random() * 52)
    ];
  }

  return string;
};

export const linkManager = functions.https.onRequest(app);
